// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteService.Core.Infrastructure.Context;

namespace TesteService.Core.Migrations
{
    [DbContext(typeof(TesteDb))]
    partial class TesteDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TesteService.Core.Entities.TAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("T02_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cash")
                        .HasColumnName("T02_SALDO")
                        .HasColumnType("real");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnName("T02_USERID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("T02_CONTA");
                });

            modelBuilder.Entity("TesteService.Core.Entities.TTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiptID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SendID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("ReceiptID");

                    b.HasIndex("SendID");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("TesteService.Core.Entities.TUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CPF_CNPJ")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                   b.Property<int>("TypeUser")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CPF_CNPJ");

                    b.HasIndex("Email");

                    b.ToTable("T01_USUARIOS");
                });

            modelBuilder.Entity("TesteService.Core.Entities.TAccount", b =>
                {
                    b.HasOne("TesteService.Core.Entities.TUser", "User")
                        .WithOne("Account")
                        .HasForeignKey("TesteService.Core.Entities.TAccount", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TesteService.Core.Entities.TTransfer", b =>
                {
                    b.HasOne("TesteService.Core.Entities.TUser", "Receiver")
                        .WithMany("Receivers")
                        .HasForeignKey("ReceiptID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TesteService.Core.Entities.TUser", "Sender")
                        .WithMany("Senders")
                        .HasForeignKey("SendID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
